import DetailedError from '../error.js';
import { enableDebugLog } from '../logger.js';
import NoopUrlStorage from '../noopUrlStorage.js';
import type { UploadInput, UploadOptions } from '../options.js';
import BaseUpload from '../upload.js';
import BrowserFileReader from './fileReader.js';
import fingerprint from './fileSignature.js';
import DefaultHttpStack from './httpStack.js';
import { WebStorageUrlStorage, canStoreURLs } from './urlStorage.js';
declare const defaultOptions: {
    httpStack: DefaultHttpStack;
    fileReader: BrowserFileReader;
    urlStorage: NoopUrlStorage | WebStorageUrlStorage;
    fingerprint: typeof fingerprint;
    endpoint: null;
    uploadUrl: null;
    metadata: {};
    uploadSize: null;
    onProgress: null;
    onChunkComplete: null;
    onSuccess: null;
    onError: null;
    onUploadUrlAvailable: null;
    overridePatchMethod: boolean;
    headers: {};
    addRequestId: boolean;
    onBeforeRequest: null;
    onAfterResponse: null;
    onShouldRetry: (err: any) => boolean;
    chunkSize: number;
    retryDelays: number[];
    parallelUploads: number;
    parallelUploadBoundaries: null;
    storeFingerprintForResuming: boolean;
    removeFingerprintOnSuccess: boolean;
    uploadLengthDeferred: boolean;
    uploadDataDuringCreation: boolean;
    protocol: string;
};
declare class Upload extends BaseUpload {
    constructor(file: UploadInput, options?: Partial<UploadOptions>);
    static terminate(url: string, options?: Partial<UploadOptions>): Promise<void>;
}
declare const isSupported: boolean;
export { Upload, canStoreURLs, defaultOptions, isSupported, enableDebugLog, DefaultHttpStack, DetailedError, };
