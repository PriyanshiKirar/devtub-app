import type { HttpProgressHandler, HttpRequest, HttpResponse, HttpStack } from '../options.js';
export default class XHRHttpStack implements HttpStack {
    createRequest(method: any, url: any): XHRRequest;
    getName(): string;
}
declare class XHRRequest implements HttpRequest {
    _xhr: XMLHttpRequest;
    _method: string;
    _url: string;
    _headers: Record<string, string>;
    constructor(method: string, url: string);
    getMethod(): string;
    getURL(): string;
    setHeader(header: string, value: string): void;
    getHeader(header: string): string;
    setProgressHandler(progressHandler: HttpProgressHandler): void;
    send(body?: Blob): Promise<XHRResponse>;
    abort(): Promise<void>;
    getUnderlyingObject(): XMLHttpRequest;
}
declare class XHRResponse implements HttpResponse {
    _xhr: XMLHttpRequest;
    constructor(xhr: XMLHttpRequest);
    getStatus(): number;
    getHeader(header: string): string | undefined;
    getBody(): string;
    getUnderlyingObject(): XMLHttpRequest;
}
export {};
